//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CoolProp
{
  public class CP
  {
    public static string get_parameter_information(int key, string info)
    {
      string ret = CPInvoke.get_parameter_information(key, info);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static parameters get_parameter_index(string param_name)
    {
      parameters ret = (parameters) CPInvoke.get_parameter_index(param_name);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool is_valid_phase(string phase_name, SWIGTYPE_p_CoolProp__phases iOutput)
    {
      bool ret = CPInvoke.is_valid_phase(phase_name, SWIGTYPE_p_CoolProp__phases.getCPtr(iOutput));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static phases get_phase_index(string param_name)
    {
      phases ret = (phases) CPInvoke.get_phase_index(param_name);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool is_trivial_parameter(int key)
    {
      bool ret = CPInvoke.is_trivial_parameter(key);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool is_valid_parameter(string name, SWIGTYPE_p_CoolProp__parameters iOutput)
    {
      bool ret = CPInvoke.is_valid_parameter(name, SWIGTYPE_p_CoolProp__parameters.getCPtr(iOutput));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool is_valid_first_derivative(string name, SWIGTYPE_p_CoolProp__parameters iOf,
      SWIGTYPE_p_CoolProp__parameters iWrt, SWIGTYPE_p_CoolProp__parameters iConstant)
    {
      bool ret = CPInvoke.is_valid_first_derivative(name, SWIGTYPE_p_CoolProp__parameters.getCPtr(iOf),
        SWIGTYPE_p_CoolProp__parameters.getCPtr(iWrt), SWIGTYPE_p_CoolProp__parameters.getCPtr(iConstant));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool is_valid_first_saturation_derivative(string name, SWIGTYPE_p_CoolProp__parameters iOf,
      SWIGTYPE_p_CoolProp__parameters iWrt)
    {
      bool ret = CPInvoke.is_valid_first_saturation_derivative(name, SWIGTYPE_p_CoolProp__parameters.getCPtr(iOf),
        SWIGTYPE_p_CoolProp__parameters.getCPtr(iWrt));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool is_valid_second_derivative(string name, SWIGTYPE_p_CoolProp__parameters iOf1,
      SWIGTYPE_p_CoolProp__parameters iWrt1, SWIGTYPE_p_CoolProp__parameters iConstant1,
      SWIGTYPE_p_CoolProp__parameters iWrt2, SWIGTYPE_p_CoolProp__parameters iConstant2)
    {
      bool ret = CPInvoke.is_valid_second_derivative(name, SWIGTYPE_p_CoolProp__parameters.getCPtr(iOf1),
        SWIGTYPE_p_CoolProp__parameters.getCPtr(iWrt1), SWIGTYPE_p_CoolProp__parameters.getCPtr(iConstant1),
        SWIGTYPE_p_CoolProp__parameters.getCPtr(iWrt2), SWIGTYPE_p_CoolProp__parameters.getCPtr(iConstant2));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string get_csv_parameter_list()
    {
      string ret = CPInvoke.get_csv_parameter_list();
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool match_pair(parameters key1, parameters key2, parameters x1, parameters x2, SWIGTYPE_p_bool swap)
    {
      bool ret = CPInvoke.match_pair((int) key1, (int) key2, (int) x1, (int) x2, SWIGTYPE_p_bool.getCPtr(swap));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static input_pairs get_input_pair_index(string input_pair_name)
    {
      input_pairs ret = (input_pairs) CPInvoke.get_input_pair_index(input_pair_name);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string get_input_pair_short_desc(input_pairs pair)
    {
      string ret = CPInvoke.get_input_pair_short_desc((int) pair);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string get_input_pair_long_desc(input_pairs pair)
    {
      string ret = CPInvoke.get_input_pair_long_desc((int) pair);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static void split_input_pair(input_pairs pair, SWIGTYPE_p_CoolProp__parameters p1,
      SWIGTYPE_p_CoolProp__parameters p2)
    {
      CPInvoke.split_input_pair((int) pair, SWIGTYPE_p_CoolProp__parameters.getCPtr(p1),
        SWIGTYPE_p_CoolProp__parameters.getCPtr(p2));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static string get_mixture_binary_pair_data(string CAS1, string CAS2, string param)
    {
      string ret = CPInvoke.get_mixture_binary_pair_data(CAS1, CAS2, param);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static void set_mixture_binary_pair_data(string CAS1, string CAS2, string param, double val)
    {
      CPInvoke.set_mixture_binary_pair_data(CAS1, CAS2, param, val);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static string get_mixture_binary_pair_pcsaft(string CAS1, string CAS2, string param)
    {
      string ret = CPInvoke.get_mixture_binary_pair_pcsaft(CAS1, CAS2, param);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static void set_mixture_binary_pair_pcsaft(string CAS1, string CAS2, string param, double val)
    {
      CPInvoke.set_mixture_binary_pair_pcsaft(CAS1, CAS2, param, val);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void extract_backend_families(string backend_string, SWIGTYPE_p_CoolProp__backend_families f1,
      SWIGTYPE_p_CoolProp__backend_families f2)
    {
      CPInvoke.extract_backend_families(backend_string, SWIGTYPE_p_CoolProp__backend_families.getCPtr(f1),
        SWIGTYPE_p_CoolProp__backend_families.getCPtr(f2));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void extract_backend_families_string(string backend_string, SWIGTYPE_p_CoolProp__backend_families f1,
      SWIGTYPE_p_std__string f2)
    {
      CPInvoke.extract_backend_families_string(backend_string, SWIGTYPE_p_CoolProp__backend_families.getCPtr(f1),
        SWIGTYPE_p_std__string.getCPtr(f2));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static string get_backend_string(backends backend)
    {
      string ret = CPInvoke.get_backend_string((int) backend);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static void register_backend(backend_families bf,
      SWIGTYPE_p_shared_ptrT_CoolProp__AbstractStateGenerator_t gen)
    {
      CPInvoke.register_backend((int) bf, SWIGTYPE_p_shared_ptrT_CoolProp__AbstractStateGenerator_t.getCPtr(gen));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static double Props1SI(string FluidName, string Output)
    {
      double ret = CPInvoke.Props1SI(FluidName, Output);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static double PropsSI(string Output, string Name1, double Prop1, string Name2, double Prop2,
      string FluidName)
    {
      double ret = CPInvoke.PropsSI(Output, Name1, Prop1, Name2, Prop2, FluidName);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static VectorOfDoubleVector PropsSImulti(StringVector Outputs, string Name1, DoubleVector Prop1,
      string Name2, DoubleVector Prop2, string backend, StringVector fluids, DoubleVector fractions)
    {
      VectorOfDoubleVector ret = new VectorOfDoubleVector(
        CPInvoke.PropsSImulti(StringVector.getCPtr(Outputs), Name1, DoubleVector.getCPtr(Prop1), Name2,
          DoubleVector.getCPtr(Prop2), backend, StringVector.getCPtr(fluids), DoubleVector.getCPtr(fractions)), true);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static int get_debug_level()
    {
      int ret = CPInvoke.get_debug_level();
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static void set_debug_level(int level)
    {
      CPInvoke.set_debug_level(level);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void set_error_string(string error)
    {
      CPInvoke.set_error_string(error);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void set_warning_string(string warning)
    {
      CPInvoke.set_warning_string(warning);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static double saturation_ancillary(string fluid_name, string output, int Q, string input, double value)
    {
      double ret = CPInvoke.saturation_ancillary(fluid_name, output, Q, input, value);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string get_global_param_string(string ParamName)
    {
      string ret = CPInvoke.get_global_param_string(ParamName);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string get_fluid_param_string(string FluidName, string ParamName)
    {
      string ret = CPInvoke.get_fluid_param_string(FluidName, ParamName);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool is_valid_fluid_string(string fluidstring)
    {
      bool ret = CPInvoke.is_valid_fluid_string(fluidstring);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool add_fluids_as_JSON(string backend, string fluidstring)
    {
      bool ret = CPInvoke.add_fluids_as_JSON(backend, fluidstring);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static void set_reference_stateS(string FluidName, string reference_state)
    {
      CPInvoke.set_reference_stateS(FluidName, reference_state);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void set_reference_stateD(string FluidName, double T, double rhomolar, double hmolar0, double smolar0)
    {
      CPInvoke.set_reference_stateD(FluidName, T, rhomolar, hmolar0, smolar0);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static string PhaseSI(string Name1, double Prop1, string Name2, double Prop2, string FluidName)
    {
      string ret = CPInvoke.PhaseSI(Name1, Prop1, Name2, Prop2, FluidName);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static void extract_backend(string fluid_string, SWIGTYPE_p_std__string backend,
      SWIGTYPE_p_std__string fluid)
    {
      CPInvoke.extract_backend(fluid_string, SWIGTYPE_p_std__string.getCPtr(backend),
        SWIGTYPE_p_std__string.getCPtr(fluid));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static string extract_fractions(string fluid_string, DoubleVector fractions)
    {
      string ret = CPInvoke.extract_fractions(fluid_string, DoubleVector.getCPtr(fractions));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string phase_lookup_string(phases Phase)
    {
      string ret = CPInvoke.phase_lookup_string((int) Phase);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string config_key_to_string(configuration_keys keys)
    {
      string ret = CPInvoke.config_key_to_string((int) keys);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static configuration_keys config_string_to_key(string s)
    {
      configuration_keys ret = (configuration_keys) CPInvoke.config_string_to_key(s);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string config_key_description(configuration_keys keys)
    {
      string ret = CPInvoke.config_key_description__SWIG_0((int) keys);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string config_key_description(string key)
    {
      string ret = CPInvoke.config_key_description__SWIG_1(key);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static bool get_config_bool(configuration_keys key)
    {
      bool ret = CPInvoke.get_config_bool((int) key);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static int get_config_int(configuration_keys key)
    {
      int ret = CPInvoke.get_config_int((int) key);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static double get_config_double(configuration_keys key)
    {
      double ret = CPInvoke.get_config_double((int) key);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string get_config_string(configuration_keys key)
    {
      string ret = CPInvoke.get_config_string((int) key);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static string get_config_as_json_string()
    {
      string ret = CPInvoke.get_config_as_json_string();
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static void set_config_bool(configuration_keys key, bool val)
    {
      CPInvoke.set_config_bool((int) key, val);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void set_config_int(configuration_keys key, int val)
    {
      CPInvoke.set_config_int((int) key, val);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void set_config_double(configuration_keys key, double val)
    {
      CPInvoke.set_config_double((int) key, val);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void set_config_string(configuration_keys key, string val)
    {
      CPInvoke.set_config_string((int) key, val);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void set_config_as_json_string(string s)
    {
      CPInvoke.set_config_as_json_string(s);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static double HAPropsSI(string OutputName, string Input1Name, double Input1, string Input2Name,
      double Input2, string Input3Name, double Input3)
    {
      double ret = CPInvoke.HAPropsSI(OutputName, Input1Name, Input1, Input2Name, Input2, Input3Name, Input3);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static double HAProps(string OutputName, string Input1Name, double Input1, string Input2Name, double Input2,
      string Input3Name, double Input3)
    {
      double ret = CPInvoke.HAProps(OutputName, Input1Name, Input1, Input2Name, Input2, Input3Name, Input3);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static double HAProps_Aux(string OutputName, double T, double p, double W, string units)
    {
      double ret = CPInvoke.HAProps_Aux(OutputName, T, p, W, units);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static double IceProps(string Name, double T, double p)
    {
      double ret = CPInvoke.IceProps(Name, T, p);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static void UseVirialCorrelations(int flag)
    {
      CPInvoke.UseVirialCorrelations(flag);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void UseIsothermCompressCorrelation(int flag)
    {
      CPInvoke.UseIsothermCompressCorrelation(flag);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void UseIdealGasEnthalpyCorrelations(int flag)
    {
      CPInvoke.UseIdealGasEnthalpyCorrelations(flag);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static void HAHelp()
    {
      CPInvoke.HAHelp();
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public static int returnHumAirCode(string Code)
    {
      int ret = CPInvoke.returnHumAirCode(Code);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }

    public static double cair_sat(double T)
    {
      double ret = CPInvoke.cair_sat(T);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }
  }
}
