//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


namespace CoolProp
{
  public class CriticalState : SimpleState
  {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;

    internal CriticalState(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CPInvoke.CriticalState_SWIGUpcast(cPtr),
      cMemoryOwn)
    {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }

    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CriticalState obj)
    {
      return (obj == null)
        ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero)
        : obj.swigCPtr;
    }

    protected override void Dispose(bool disposing)
    {
      lock (this)
      {
        if (swigCPtr.Handle != global::System.IntPtr.Zero)
        {
          if (swigCMemOwn)
          {
            swigCMemOwn = false;
            CPInvoke.delete_CriticalState(swigCPtr);
          }

          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }

        base.Dispose(disposing);
      }
    }

    public bool stable
    {
      set
      {
        CPInvoke.CriticalState_stable_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        bool ret = CPInvoke.CriticalState_stable_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public CriticalState() : this(CPInvoke.new_CriticalState(), true)
    {
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }
  }
}