//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CoolProp
{
  public class GuessesStructure : global::System.IDisposable
  {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;

    internal GuessesStructure(global::System.IntPtr cPtr, bool cMemoryOwn)
    {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }

    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GuessesStructure obj)
    {
      return (obj == null)
        ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero)
        : obj.swigCPtr;
    }

    ~GuessesStructure()
    {
      Dispose(false);
    }

    public void Dispose()
    {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
      lock (this)
      {
        if (swigCPtr.Handle != global::System.IntPtr.Zero)
        {
          if (swigCMemOwn)
          {
            swigCMemOwn = false;
            CPInvoke.delete_GuessesStructure(swigCPtr);
          }

          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }

    public double T
    {
      set
      {
        CPInvoke.GuessesStructure_T_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.GuessesStructure_T_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double p
    {
      set
      {
        CPInvoke.GuessesStructure_p_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.GuessesStructure_p_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double rhomolar
    {
      set
      {
        CPInvoke.GuessesStructure_rhomolar_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.GuessesStructure_rhomolar_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double hmolar
    {
      set
      {
        CPInvoke.GuessesStructure_hmolar_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.GuessesStructure_hmolar_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double smolar
    {
      set
      {
        CPInvoke.GuessesStructure_smolar_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.GuessesStructure_smolar_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double rhomolar_liq
    {
      set
      {
        CPInvoke.GuessesStructure_rhomolar_liq_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.GuessesStructure_rhomolar_liq_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double rhomolar_vap
    {
      set
      {
        CPInvoke.GuessesStructure_rhomolar_vap_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.GuessesStructure_rhomolar_vap_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector x
    {
      set
      {
        CPInvoke.GuessesStructure_x_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.GuessesStructure_x_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector y
    {
      set
      {
        CPInvoke.GuessesStructure_y_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.GuessesStructure_y_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public GuessesStructure() : this(CPInvoke.new_GuessesStructure(), true)
    {
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public void clear()
    {
      CPInvoke.GuessesStructure_clear(swigCPtr);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }
  }
}
