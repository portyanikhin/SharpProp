//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CoolProp
{
  public class PhaseEnvelopeData : global::System.IDisposable
  {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;

    internal PhaseEnvelopeData(global::System.IntPtr cPtr, bool cMemoryOwn)
    {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }

    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhaseEnvelopeData obj)
    {
      return (obj == null)
        ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero)
        : obj.swigCPtr;
    }

    ~PhaseEnvelopeData()
    {
      Dispose(false);
    }

    public void Dispose()
    {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
      lock (this)
      {
        if (swigCPtr.Handle != global::System.IntPtr.Zero)
        {
          if (swigCMemOwn)
          {
            swigCMemOwn = false;
            CPInvoke.delete_PhaseEnvelopeData(swigCPtr);
          }

          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }

    public bool TypeI
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_TypeI_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        bool ret = CPInvoke.PhaseEnvelopeData_TypeI_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public bool built
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_built_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        bool ret = CPInvoke.PhaseEnvelopeData_built_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public uint iTsat_max
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_iTsat_max_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        uint ret = CPInvoke.PhaseEnvelopeData_iTsat_max_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public uint ipsat_max
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_ipsat_max_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        uint ret = CPInvoke.PhaseEnvelopeData_ipsat_max_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public uint icrit
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_icrit_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        uint ret = CPInvoke.PhaseEnvelopeData_icrit_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector T
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_T_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_T_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector p
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_p_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_p_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector lnT
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_lnT_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_lnT_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector lnp
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_lnp_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_lnp_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector rhomolar_liq
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_rhomolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_rhomolar_liq_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector rhomolar_vap
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_rhomolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_rhomolar_vap_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector lnrhomolar_liq
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_lnrhomolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_lnrhomolar_liq_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector lnrhomolar_vap
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_lnrhomolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_lnrhomolar_vap_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector hmolar_liq
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_hmolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_hmolar_liq_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector hmolar_vap
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_hmolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_hmolar_vap_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector smolar_liq
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_smolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_smolar_liq_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector smolar_vap
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_smolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_smolar_vap_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector Q
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_Q_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_Q_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector cpmolar_liq
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_cpmolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_cpmolar_liq_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector cpmolar_vap
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_cpmolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_cpmolar_vap_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector cvmolar_liq
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_cvmolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_cvmolar_liq_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector cvmolar_vap
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_cvmolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_cvmolar_vap_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector viscosity_liq
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_viscosity_liq_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_viscosity_liq_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector viscosity_vap
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_viscosity_vap_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_viscosity_vap_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector conductivity_liq
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_conductivity_liq_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_conductivity_liq_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector conductivity_vap
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_conductivity_vap_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_conductivity_vap_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public DoubleVector speed_sound_vap
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_speed_sound_vap_set(swigCPtr, DoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_speed_sound_vap_get(swigCPtr);
        DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public VectorOfDoubleVector K
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_K_set(swigCPtr, VectorOfDoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_K_get(swigCPtr);
        VectorOfDoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorOfDoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public VectorOfDoubleVector lnK
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_lnK_set(swigCPtr, VectorOfDoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_lnK_get(swigCPtr);
        VectorOfDoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorOfDoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public VectorOfDoubleVector x
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_x_set(swigCPtr, VectorOfDoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_x_get(swigCPtr);
        VectorOfDoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorOfDoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public VectorOfDoubleVector y
    {
      set
      {
        CPInvoke.PhaseEnvelopeData_y_set(swigCPtr, VectorOfDoubleVector.getCPtr(value));
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        global::System.IntPtr cPtr = CPInvoke.PhaseEnvelopeData_y_get(swigCPtr);
        VectorOfDoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorOfDoubleVector(cPtr, false);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public PhaseEnvelopeData() : this(CPInvoke.new_PhaseEnvelopeData(), true)
    {
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public void resize(uint N)
    {
      CPInvoke.PhaseEnvelopeData_resize(swigCPtr, N);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public void clear()
    {
      CPInvoke.PhaseEnvelopeData_clear(swigCPtr);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public void insert_variables(double T, double p, double rhomolar_liq, double rhomolar_vap, double hmolar_liq,
      double hmolar_vap, double smolar_liq, double smolar_vap, SWIGTYPE_p_std__vectorT_CoolPropDbl_t x,
      SWIGTYPE_p_std__vectorT_CoolPropDbl_t y, uint i)
    {
      CPInvoke.PhaseEnvelopeData_insert_variables(swigCPtr, T, p, rhomolar_liq, rhomolar_vap, hmolar_liq, hmolar_vap,
        smolar_liq, smolar_vap, SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(x),
        SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(y), i);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public void store_variables(double T, double p, double rhomolar_liq, double rhomolar_vap, double hmolar_liq,
      double hmolar_vap, double smolar_liq, double smolar_vap, SWIGTYPE_p_std__vectorT_CoolPropDbl_t x,
      SWIGTYPE_p_std__vectorT_CoolPropDbl_t y)
    {
      CPInvoke.PhaseEnvelopeData_store_variables(swigCPtr, T, p, rhomolar_liq, rhomolar_vap, hmolar_liq, hmolar_vap,
        smolar_liq, smolar_vap, SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(x),
        SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(y));
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }
  }
}
