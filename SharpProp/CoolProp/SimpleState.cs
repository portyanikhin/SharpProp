//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CoolProp
{
  public class SimpleState : global::System.IDisposable
  {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;

    internal SimpleState(global::System.IntPtr cPtr, bool cMemoryOwn)
    {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }

    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SimpleState obj)
    {
      return (obj == null)
        ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero)
        : obj.swigCPtr;
    }

    ~SimpleState()
    {
      Dispose(false);
    }

    public void Dispose()
    {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
      lock (this)
      {
        if (swigCPtr.Handle != global::System.IntPtr.Zero)
        {
          if (swigCMemOwn)
          {
            swigCMemOwn = false;
            CPInvoke.delete_SimpleState(swigCPtr);
          }

          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }

    public double rhomolar
    {
      set
      {
        CPInvoke.SimpleState_rhomolar_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.SimpleState_rhomolar_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double T
    {
      set
      {
        CPInvoke.SimpleState_T_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.SimpleState_T_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double p
    {
      set
      {
        CPInvoke.SimpleState_p_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.SimpleState_p_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double hmolar
    {
      set
      {
        CPInvoke.SimpleState_hmolar_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.SimpleState_hmolar_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double smolar
    {
      set
      {
        CPInvoke.SimpleState_smolar_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.SimpleState_smolar_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double umolar
    {
      set
      {
        CPInvoke.SimpleState_umolar_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.SimpleState_umolar_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public double Q
    {
      set
      {
        CPInvoke.SimpleState_Q_set(swigCPtr, value);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      }
      get
      {
        double ret = CPInvoke.SimpleState_Q_get(swigCPtr);
        if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
        return ret;
      }
    }

    public SimpleState() : this(CPInvoke.new_SimpleState(), true)
    {
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public void fill(double v)
    {
      CPInvoke.SimpleState_fill(swigCPtr, v);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
    }

    public bool is_valid()
    {
      bool ret = CPInvoke.SimpleState_is_valid(swigCPtr);
      if (CPInvoke.SWIGPendingException.Pending) throw CPInvoke.SWIGPendingException.Retrieve();
      return ret;
    }
  }
}
